package _TrabalhoFinal_POO2;

import java.io.Serializable;
import java.util.HashMap;
import java.util.NoSuchElementException;


public final class EstoqueFile implements Serializable{	

	/**Mudar nome da file ta dando erro
	 * 
	 */
	private static final long serialVersionUID = -4041803540745309874L;
	private static HashMapFile<String, Produto[]> fileT = new HashMapFile<String, Produto[]>("prod.ser");

	private HashMap<String, Produto[]> map;
	
	public EstoqueFile() {
		super();
		this.map = new HashMap<String, Produto[]>();
	}
	
	// Cria categoria com dado produto
	void createCategory(String categoria) {
		Produto[] pp = new Produto[10];
		map.put(categoria, pp);
	}
	
	// Salva mapa em file
	void saveFile() {
		fileT.writeMap(this.map);
	}
	
	// Le file
	void readFile(){
		this.map = fileT.readMap();
	}
	
	// Retorna file
	HashMap<String, Produto[]> returnFile(){
		return fileT.readMap();
	}
	// Adiciona Produto a dada categoria
	void addProduct(Produto prod) {
		
		if(map.get(prod.getCat()) == null) {	// Se categoria adicionada nao existe cria uma
			createCategory(prod.getCat());
		} 
		
		Produto[] pp = map.get(prod.getCat());
		
		for(int i = 0; i < pp.length-1; i++) {
			if(pp[i] == null) {
				pp[i] = prod;
				map.put(prod.getCat(), pp);
				saveFile();
				return;
			} else if(i == pp.length - 1 && pp[i] != null) { 	// Se array está cheio cria outro
				Produto[] newPP =  new Produto[pp.length*2];
				newPP = pp;		// Atribui valores salvos no array a uma nova instancia maior;
				newPP[i + 1] = prod;
				map.put(prod.getCat(), newPP);
				saveFile();
				return;
			}
		}
	}
	
	// Edita dados de dado produto com exceção do codigo, que é usado de referencia
	void editProduct(String cat, Produto novoProduto) throws IllegalArgumentException{
		Produto[] categoriaEditada = map.get(cat);
		for(int i = 0; i < categoriaEditada.length - 1; i++) {
			if(categoriaEditada[i].getCode() == novoProduto.getCode()) {
				categoriaEditada[i] = novoProduto;
				saveFile();
				return;
			}
		}
		throw new IllegalArgumentException("Código do produto inválido");
	}
	
	// Retorna produto especificado
	Produto getProduct(String cat, int code) throws NoSuchElementException{
		
		if(map.get(cat) == null) {
			throw new NoSuchElementException("Invalid Category!");
		}
		Produto[] pp = map.get(cat);
		for(int i = 0; i < pp.length - 1; i++) {
			if(pp[i].getCode() == code) {
				return pp[i];
			}
		}
		return null;
		
	}
	
	
	public static void main(String[]args) {
		Produto p1 = new Produto("ProdutoTeste 1", "11/03/2019", 18.00, 421, "Categoria1");
		Produto p2 = new Produto("ProdutoTeste 2", "12/03/2019", 19.00, 422, "Categoria1");
		Produto p3 = new Produto("ProdutoTeste 3", "13/03/2019", 20.00, 423, "Categoria1");
		
		Produto hemp1 = new Produto("Mary Jane 1", "20/04/2020", 42.00, 420, "Weed");
		Produto hemp2 = new Produto("Mary Jane 2", "20/04/2020", 42.00, 429, "Weed");
		Produto hemp3 = new Produto("Mary Jane 3", "20/04/2020", 42.00, 428, "Weed");
		
		EstoqueFile teste = new EstoqueFile();
		teste.addProduct(p1);
		teste.addProduct(p2);
		teste.addProduct(p3);
		teste.addProduct(hemp1);
		teste.addProduct(hemp2);
		teste.addProduct(hemp3);
		if(teste.map == EstoqueFile.fileT.readMap()) {
			System.out.println("deu bom!");
		} else {
			System.out.println("deu ruim :(");
		}
		System.out.println(teste.getProduct("Categoria1", 420).getName());
		
	}
}
